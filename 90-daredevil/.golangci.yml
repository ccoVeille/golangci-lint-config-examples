---
# golangci-lint configuration file made by @ccoVeille
# Source: https://github.com/ccoVeille/golangci-lint-config-examples/
# Author: @ccoVeille
# License: MIT
# Variant: 90-daredevil
# Version: v2.0.0
#
version: "2"

formatters:
  enable:
    # format the code
    - gofmt
    # format the block of imports
    - gci

  settings:
    # format the code with Go standard library
    gofmt:
      # simplify the code
      # https://pkg.go.dev/cmd/gofmt#hdr-The_simplify_command
      simplify: true
      rewrite-rules:
        # replace `interface{}` with `any` in the code on format
        - pattern: 'interface{}'
          replacement: 'any'

    # make sure imports are always in a deterministic order
    # https://github.com/daixiang0/gci/
    gci:  # define the section orders for imports
      sections:
        # Standard section: captures all standard packages.
        - standard
        # Default section: catchall that is not standard or custom
        - default
        # linters that related to local tool, so they should be separated
        - localmodule

run:
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 5m

issues:
  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0
  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 0
  # Make issues output unique by line.
  # Default: true
  uniq-by-line: false

linters:
  # some linters are enabled by default
  # https://golangci-lint.run/usage/linters/
  #
  # enable some extra linters
  default: all

  settings:
    usestdlibvars:
      # Suggest the use of http.MethodXX.
      # Default: true
      http-method: true
      # Suggest the use of http.StatusXX.
      # Default: true
      http-status-code: true
      # Suggest the use of time.Weekday.String().
      # Default: true
      time-weekday: true
      # Suggest the use of constants available in time package
      # Default: false
      time-layout: true

    staticcheck:
      # SAxxxx checks in https://staticcheck.io/docs/configuration/options/#checks
      checks: ["all"]

    nolintlint:
      # Enable to require an explanation of nonzero length
      # after each nolint directive.
      # Default: false
      require-explanation: true
      # Enable to require nolint directives to mention the specific
      # linter being suppressed.
      # Default: false
      require-specific: true

    govet:
      enable-all: true
      disable:
        - fieldalignment

    gocritic:
      enable-all: true

    revive:
      enable-all-rules: true
      rules:
        # we must provide configuration for linter that requires them
        # enable-all-rules is OK, but many revive linters expect configuration
        # and cannot work without them

        # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#context-as-argument
        - name: context-as-argument
          arguments:
            - allowTypesBefore: "*testing.T"

        # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#exported
        - name: exported
          arguments:
            # enables checking public methods of private types
            - "checkPrivateReceivers"
            # make error messages clearer
            - "sayRepetitiveInsteadOfStutters"

    dupword:
      # Keywords used to ignore detection.
      # Default: []
      ignore: []
      #  - "blah" # this will accept "blah blah â€¦" as a valid duplicate word

    misspell:
      # Correct spellings using locale preferences for US or UK.
      # Setting locale to US will correct the British spelling of 'colour' to 'color'.
      # Default ("") is to use a neutral variety of English.
      locale: US

      # List of words to ignore
      # among the one defined in https://github.com/golangci/misspell/blob/master/words.go
      ignore-rules: []
      #  - valor
      #  - and

      # Extra word corrections.
      extra-words: []
      #  - typo: "whattever"
      #    correction: "whatever"

output:
  # Order to use when sorting results.
  # Possible values: `file`, `linter`, and `severity`.
  #
  # If the severity values are inside the following list, they are ordered in this order:
  #   1. error
  #   2. warning
  #   3. high
  #   4. medium
  #   5. low
  # Either they are sorted alphabetically.
  #
  # Default: ["file"]
  sort-order:
    - linter
    - severity
    - file # filepath, line, and column.
